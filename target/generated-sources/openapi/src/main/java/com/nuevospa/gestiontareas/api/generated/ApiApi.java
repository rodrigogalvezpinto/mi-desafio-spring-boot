/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nuevospa.gestiontareas.api.generated;

import com.nuevospa.gestiontareas.dto.generated.CambioEstadoTarea;
import com.nuevospa.gestiontareas.dto.generated.Error;
import com.nuevospa.gestiontareas.dto.generated.EstadoTarea;
import com.nuevospa.gestiontareas.dto.generated.LoginRequest;
import com.nuevospa.gestiontareas.dto.generated.LoginResponse;
import com.nuevospa.gestiontareas.dto.generated.PageTarea;
import com.nuevospa.gestiontareas.dto.generated.Prioridad;
import com.nuevospa.gestiontareas.dto.generated.Tarea;
import java.util.UUID;
import com.nuevospa.gestiontareas.dto.generated.Usuario;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-16T14:52:53.339869700-03:00[America/Santiago]")
@Validated
@Tag(name = "tareas", description = "the tareas API")
public interface ApiApi {

    /**
     * PATCH /api/tareas/{id}/estado : Actualizar estado de una tarea
     *
     * @param id  (required)
     * @param cambioEstadoTarea  (required)
     * @return Estado de tarea actualizado (status code 200)
     *         or Datos inválidos (status code 400)
     *         or Tarea no encontrada (status code 404)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "actualizarEstadoTarea",
        summary = "Actualizar estado de una tarea",
        tags = { "tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Estado de tarea actualizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tarea.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tarea no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/tareas/{id}/estado",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Tarea> _actualizarEstadoTarea(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "CambioEstadoTarea", description = "", required = true) @Valid @RequestBody CambioEstadoTarea cambioEstadoTarea
    );


    /**
     * PUT /api/tareas/{id} : Actualizar una tarea
     *
     * @param id  (required)
     * @param tarea  (required)
     * @return Tarea actualizada (status code 200)
     *         or Datos inválidos (status code 400)
     *         or Tarea no encontrada (status code 404)
     *         or No autorizado (status code 401)
     *         or Prohibido - Sin permisos para esta tarea (status code 403)
     */
    @Operation(
        operationId = "actualizarTarea",
        summary = "Actualizar una tarea",
        tags = { "tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea actualizada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tarea.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tarea no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Prohibido - Sin permisos para esta tarea", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/tareas/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Tarea> _actualizarTarea(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "Tarea", description = "", required = true) @Valid @RequestBody Tarea tarea
    );


    /**
     * POST /api/tareas : Crear una nueva tarea
     *
     * @param tarea  (required)
     * @return Tarea creada (status code 201)
     *         or Datos inválidos (status code 400)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "crearTarea",
        summary = "Crear una nueva tarea",
        tags = { "tareas" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Tarea creada"),
            @ApiResponse(responseCode = "400", description = "Datos inválidos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tareas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Void> _crearTarea(
        @Parameter(name = "Tarea", description = "", required = true) @Valid @RequestBody Tarea tarea
    );


    /**
     * DELETE /api/tareas/{id} : Eliminar una tarea
     *
     * @param id  (required)
     * @return Tarea eliminada (status code 204)
     *         or Tarea no encontrada (status code 404)
     *         or No autorizado (status code 401)
     *         or Prohibido - Sin permisos para esta tarea (status code 403)
     */
    @Operation(
        operationId = "eliminarTarea",
        summary = "Eliminar una tarea",
        tags = { "tareas" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Tarea eliminada"),
            @ApiResponse(responseCode = "404", description = "Tarea no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Prohibido - Sin permisos para esta tarea", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/tareas/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> _eliminarTarea(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * POST /api/auth/login : Iniciar sesión
     *
     * @param loginRequest  (required)
     * @return Login exitoso (status code 200)
     *         or Credenciales inválidas (status code 401)
     */
    @Operation(
        operationId = "login",
        summary = "Iniciar sesión",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login exitoso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Credenciales inválidas", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<LoginResponse> _login(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    );


    /**
     * GET /api/estados : Obtener todos los estados de tareas
     *
     * @return Lista de estados (status code 200)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "obtenerEstados",
        summary = "Obtener todos los estados de tareas",
        tags = { "estados" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de estados", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EstadoTarea.class)))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/estados",
        produces = { "application/json" }
    )
    ResponseEntity<List<EstadoTarea>> _obtenerEstados(
        
    );


    /**
     * GET /api/prioridades : Obtener todas las prioridades
     *
     * @return Lista de prioridades (status code 200)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "obtenerPrioridades",
        summary = "Obtener todas las prioridades",
        tags = { "prioridades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de prioridades", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Prioridad.class)))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/prioridades",
        produces = { "application/json" }
    )
    ResponseEntity<List<Prioridad>> _obtenerPrioridades(
        
    );


    /**
     * GET /api/tareas/{id} : Obtener tarea por ID
     *
     * @param id  (required)
     * @return Tarea encontrada (status code 200)
     *         or Tarea no encontrada (status code 404)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "obtenerTareaPorId",
        summary = "Obtener tarea por ID",
        tags = { "tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tarea.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tarea no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tareas/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Tarea> _obtenerTareaPorId(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/tareas : Obtener tareas paginadas y filtradas
     *
     * @param page Número de página (empieza en 0) (optional, default to 0)
     * @param size Elementos por página (optional, default to 10)
     * @param estadoId Filtrar por estado (optional)
     * @param usuarioId Filtrar por usuario asignado (optional)
     * @param prioridad Filtrar por prioridad (optional)
     * @param sort Ordenar por campos (fechaCreacion,desc) (optional)
     * @return Lista paginada de tareas (status code 200)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "obtenerTareas",
        summary = "Obtener tareas paginadas y filtradas",
        tags = { "tareas" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista paginada de tareas", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageTarea.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tareas",
        produces = { "application/json" }
    )
    ResponseEntity<PageTarea> _obtenerTareas(
        @Parameter(name = "page", description = "Número de página (empieza en 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Elementos por página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
        @Parameter(name = "estadoId", description = "Filtrar por estado", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estadoId", required = false) Integer estadoId,
        @Parameter(name = "usuarioId", description = "Filtrar por usuario asignado", in = ParameterIn.QUERY) @Valid @RequestParam(value = "usuarioId", required = false) UUID usuarioId,
        @Parameter(name = "prioridad", description = "Filtrar por prioridad", in = ParameterIn.QUERY) @Valid @RequestParam(value = "prioridad", required = false) Integer prioridad,
        @Parameter(name = "sort", description = "Ordenar por campos (fechaCreacion,desc)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    );


    /**
     * GET /api/usuarios/{id} : Obtener usuario por ID
     *
     * @param id  (required)
     * @return Usuario encontrado (status code 200)
     *         or Usuario no encontrado (status code 404)
     *         or No autorizado (status code 401)
     */
    @Operation(
        operationId = "obtenerUsuarioPorId",
        summary = "Obtener usuario por ID",
        tags = { "usuarios" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usuario encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Usuario.class))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/usuarios/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Usuario> _obtenerUsuarioPorId(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/usuarios : Obtener todos los usuarios
     *
     * @return Lista de usuarios (status code 200)
     *         or No autorizado (status code 401)
     *         or Prohibido - Solo administradores (status code 403)
     */
    @Operation(
        operationId = "obtenerUsuarios",
        summary = "Obtener todos los usuarios",
        tags = { "usuarios" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de usuarios", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Usuario.class)))
            }),
            @ApiResponse(responseCode = "401", description = "No autorizado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Prohibido - Solo administradores", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/usuarios",
        produces = { "application/json" }
    )
    ResponseEntity<List<Usuario>> _obtenerUsuarios(
        
    );

}
